buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:jib-core:0.12.0'
    }
}


import com.google.cloud.tools.jib.api.Containerizer
import com.google.cloud.tools.jib.api.DockerDaemonImage
import com.google.cloud.tools.jib.api.ImageFormat
import com.google.cloud.tools.jib.api.Jib

dependencies {
    implementation 'org.jenkins-ci.plugins:structs:1.20@jar'
    implementation 'org.jenkins-ci.plugins:structs:1.20'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-api:2.38@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-api:2.38'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2.78@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2.78'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-job:2.36@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-job:2.36'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.18@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.18'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.35@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.35'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.20@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.20'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-support:3.3@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-support:3.3'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.9@jar'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.9'
    implementation 'org.jenkins-ci.plugins:durable-task:1.33@jar'
    implementation 'org.jenkins-ci.plugins:durable-task:1.33'
    implementation 'org.jenkins-ci.plugins:script-security:1.68@jar'
    implementation 'org.jenkins-ci.plugins:script-security:1.68'
    implementation 'io.jenkins:configuration-as-code:1.34@jar'
    implementation 'io.jenkins:configuration-as-code:1.34'

    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    implementation 'com.cloudbees:groovy-cps:1.31'
    implementation 'org.jboss.marshalling:jboss-marshalling:2.0.9.Final'
    implementation 'org.jenkins-ci.plugins:scm-api:2.6.3@jar'
    implementation 'org.jenkins-ci.main:jenkins-war:2.176.4'
    implementation 'org.eclipse.jetty:jetty-webapp:9.4.25.v20191220'
    implementation 'org.eclipse.jetty:jetty-security:9.4.25.v20191220'

    testImplementation libraries.GROOVY
    testImplementation libraries.SPOCK
    testImplementation libraries.JUNIT
}

jar {
    manifest {
        attributes 'Main-Class': 'org.ka.jenkins.masterless.image.App'
    }
}

task deletePlugins(type: Delete) {
    delete "${buildDir}/plugins"
}

task copyPlugins(type: Copy, dependsOn: deletePlugins) {
    into "${buildDir}/plugins"
    from(configurations.default) {
        include '*.hpi'
        include '*.jpi'
    }
    rename { it.replaceAll('(-[0-9.-]+)\\.(hpi|jpi)', '.$2') }
}

task deleteWar(type: Delete) {
    delete "${buildDir}/war"
}

task explodeWar(type: Copy, dependsOn: [deleteWar, copyPlugins]) {
    def jenkinsWar = file(configurations.default.find { it.name.startsWith('jenkins-war') && it.name.endsWith('.war')})

    from zipTree(jenkinsWar)
    into "${buildDir}/war"
}

test.dependsOn(explodeWar)
test.dependsOn(copyPlugins)

task createClasspath(type: Copy, dependsOn: jar) {
    into "${buildDir}/classpath"
    from(configurations.default) {
        include '*.jar'
    }
    from jar
}

task image(dependsOn: createClasspath) {
    doLast {
        Jib.from('gcr.io/distroless/java:11-debug')
                .addLayer([file("${buildDir}/classpath").toPath()], '/tmp')
                .addLayer([file("${buildDir}/war").toPath()], '/tmp')
                .addLayer([file("${buildDir}/plugins").toPath()], '/tmp/jenkins_home')
                .setFormat(ImageFormat.Docker)
                .addEnvironmentVariable('JUNKINS_ROOT_DIR', '/tmp/jenkins_home')
                .addEnvironmentVariable('JUNKINS_WAR_EXPLODED', '/tmp/war')
                .setEntrypoint('java', '-classpath', "/tmp/classpath/*", 'org.ka.jenkins.masterless.image.App')
                .containerize(Containerizer.to(DockerDaemonImage.named("junkins/masterless")))
    }
}
